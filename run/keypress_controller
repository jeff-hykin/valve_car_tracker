#!/usr/bin/env sh
"\"",`$(echo --% ' |out-null)" >$null;function :{};function dv{<#${/*'>/dev/null )` 2>/dev/null;dv() { #>
echo "1.40.3"; : --% ' |out-null <#'; }; version="$(dv)"; deno="$HOME/.deno/$version/bin/deno"; if [ -x "$deno" ]; then  exec "$deno" run -q --no-lock --unstable -A "$0" "$@";  elif [ -f "$deno" ]; then  chmod +x "$deno" && exec "$deno" run -q --no-lock --unstable -A "$0" "$@";  fi; bin_dir="$HOME/.deno/$version/bin"; exe="$bin_dir/deno"; has () { command -v "$1" >/dev/null; } ;  if ! has unzip; then if ! has apt-get; then  has brew && brew install unzip; else  if [ "$(whoami)" = "root" ]; then  apt-get install unzip -y; elif has sudo; then  echo "Can I install unzip for you? (its required for this command to work) ";read ANSWER;echo;  if [ "$ANSWER" = "y" ] || [ "$ANSWER" = "yes" ] || [ "$ANSWER" = "Y" ]; then  sudo apt-get install unzip -y; fi; elif has doas; then  echo "Can I install unzip for you? (its required for this command to work) ";read ANSWER;echo;  if [ "$ANSWER" = "y" ] || [ "$ANSWER" = "yes" ] || [ "$ANSWER" = "Y" ]; then  doas apt-get install unzip -y; fi; fi;  fi;  fi;  if ! has unzip; then  echo ""; echo "So I couldn't find an 'unzip' command"; echo "And I tried to auto install it, but it seems that failed"; echo "(This script needs unzip and either curl or wget)"; echo "Please install the unzip command manually then re-run this script"; exit 1;  fi;  repo="denoland/deno"; if [ "$OS" = "Windows_NT" ]; then target="x86_64-pc-windows-msvc"; else :;  case $(uname -sm) in "Darwin x86_64") target="x86_64-apple-darwin" ;; "Darwin arm64") target="aarch64-apple-darwin" ;; "Linux aarch64") repo="LukeChannings/deno-arm64" target="linux-arm64" ;; "Linux armhf") echo "deno sadly doesn't support 32-bit ARM. Please check your hardware and possibly install a 64-bit operating system." exit 1 ;; *) target="x86_64-unknown-linux-gnu" ;; esac; fi; deno_uri="https://github.com/$repo/releases/download/v$version/deno-$target.zip"; exe="$bin_dir/deno"; if [ ! -d "$bin_dir" ]; then mkdir -p "$bin_dir"; fi;  if ! curl --fail --location --progress-bar --output "$exe.zip" "$deno_uri"; then if ! wget --output-document="$exe.zip" "$deno_uri"; then echo "Howdy! I looked for the 'curl' and for 'wget' commands but I didn't see either of them. Please install one of them, otherwise I have no way to install the missing deno version needed to run this code"; exit 1; fi; fi; unzip -d "$bin_dir" -o "$exe.zip"; chmod +x "$exe"; rm "$exe.zip"; exec "$deno" run -q --no-lock --unstable -A "$0" "$@"; #>}; $DenoInstall = "${HOME}/.deno/$(dv)"; $BinDir = "$DenoInstall/bin"; $DenoExe = "$BinDir/deno.exe"; if (-not(Test-Path -Path "$DenoExe" -PathType Leaf)) { $DenoZip = "$BinDir/deno.zip"; $DenoUri = "https://github.com/denoland/deno/releases/download/v$(dv)/deno-x86_64-pc-windows-msvc.zip";  [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12;  if (!(Test-Path $BinDir)) { New-Item $BinDir -ItemType Directory | Out-Null; };  Function Test-CommandExists { Param ($command); $oldPreference = $ErrorActionPreference; $ErrorActionPreference = "stop"; try {if(Get-Command "$command"){RETURN $true}} Catch {Write-Host "$command does not exist"; RETURN $false}; Finally {$ErrorActionPreference=$oldPreference}; };  if (Test-CommandExists curl) { curl -Lo $DenoZip $DenoUri; } else { curl.exe -Lo $DenoZip $DenoUri; };  if (Test-CommandExists curl) { tar xf $DenoZip -C $BinDir; } else { tar -Lo $DenoZip $DenoUri; };  Remove-Item $DenoZip;  $User = [EnvironmentVariableTarget]::User; $Path = [Environment]::GetEnvironmentVariable('Path', $User); if (!(";$Path;".ToLower() -like "*;$BinDir;*".ToLower())) { [Environment]::SetEnvironmentVariable('Path', "$Path;$BinDir", $User); $Env:Path += ";$BinDir"; } }; & "$DenoExe" run -q --no-lock --unstable -A "$PSCommandPath" @args; Exit $LastExitCode; <# 
# */0}`;
// import { Confirm, Input, Number, Secret } from "https://deno.land/x/cliffy@v1.0.0-rc.3/prompt/mod.ts"
// import { Input } from "https://deno.land/x/cliffy@v1.0.0-rc.3/prompt/input.ts"

import * as yaml from "https://deno.land/std@0.168.0/encoding/yaml.ts"
import { FileSystem, glob } from "https://deno.land/x/quickr@0.6.66/main/file_system.js"
import { readKeypress } from "https://deno.land/x/keypress@0.0.11/mod.ts"
const _ = (await import('https://cdn.skypack.dev/lodash'))

import DateTime from "https://deno.land/x/good@1.6.2.0/date.js"
import { zip, enumerate, count, permute, combinations, wrapAroundGet } from "https://deno.land/x/good@1.6.2.0/array.js"
import { intersection, subtract } from "https://deno.land/x/good@1.6.2.0/set.js"
import { stats, sum, spread, normalizeZeroToOne, roundedUpToNearest, roundedDownToNearest } from "https://deno.land/x/good@1.6.2.0/math.js"
import { capitalize, indent, toCamelCase, digitsToEnglishArray, toPascalCase, toKebabCase, toSnakeCase, toScreamingtoKebabCase, toScreamingtoSnakeCase, toRepresentation, toString, regex, findAll, iterativelyFindAll, escapeRegexMatch, escapeRegexReplace, extractFirst, isValidIdentifier, removeCommonPrefix } from "https://deno.land/x/good@1.6.2.0/string.js"
import { generateKeys, encrypt, decrypt, hashers } from "https://deno.land/x/good@1.6.2.0/encryption.js"
import { Event, trigger, everyTime, once } from "https://deno.land/x/good@1.6.2.0/events.js"
import { recursivelyOwnKeysOf, get, set, hasKeyList, hasDirectKeyList, remove, merge, compareProperty, recursivelyIterateOwnKeysOf } from "https://deno.land/x/good@1.6.2.0/object.js"
// import { deepCopy, deepCopySymbol, allKeyDescriptions, deepSortObject, shallowSortObject, isGeneratorType,isAsyncIterable, isSyncIterable, isTechnicallyIterable, isSyncIterableObjectOrContainer, allKeys } from "https://deno.land/x/good@1.6.2.0/value.js"
// import { iter, next, Stop, Iterable, map, filter, reduce, frequencyCount, zip, count, enumerate, permute, combinations, slices, asyncIteratorToList, concurrentlyTransform, forkBy } from "https://deno.land/x/good@1.6.2.0/iterable.js"
import { parseCsv, createCsv } from "https://deno.land/x/good@1.6.2.0/csv.js"
import { BinaryHeap } from "https://deno.land/x/good@1.6.2.0/binary_heap.js"
import { parseArgs, flag, required, initialValue } from "https://deno.land/x/good@1.6.2.0/flattened/parse_args.js"
import { deferredPromise } from "https://deno.land/x/good@1.6.2.0/flattened/deferred_promise.js"
import { didYouMean } from "https://deno.land/x/good@1.6.2.0/flattened/did_you_mean.js"

const argsInfo = parseArgs({
    rawArgs: Deno.args,
    fields: [
        [["--debug", "-d", ], flag, ],
        [["--port"], initialValue(`8080`), (str)=>str],
        [["--address"], initialValue(`localhost`), (str)=>str],
    ],
    namedArgsStopper: "--",
    allowNameRepeats: true,
    valueTransformer: JSON.parse,
    isolateArgsAfterStopper: false,
    argsByNameSatisfiesNumberedArg: true,
    implicitNamePattern: /^(--|-)[a-zA-Z0-9\-_]+$/,
    implictFlagPattern: null,
})
didYouMean({
    givenWords: Object.keys(argsInfo.implicitArgsByName).filter(each=>each.startsWith(`-`)),
    possibleWords: Object.keys(argsInfo.explicitArgsByName).filter(each=>each.startsWith(`-`)),
    autoThrow: true,
    suggestionLimit: 1,
})
const args = argsInfo.simplifiedNames

// const config = yaml.parse(
//     Deno.readTextFileSync(
//         FileSystem.sync.walkUpUntil("config.yaml")+"/config.yaml"
//     )
// )

// 
// auto-reconnect 
// 
while (true) {
    let socket
    let websocketConnection
    try {
        socket = new WebSocket(`ws://${args.address}:${args.port}`)
        websocketConnection = deferredPromise()
        socket.onopen = websocketConnection.resolve
        socket.onerror = websocketConnection.reject
    } catch (error) {
        console.error(`Error connecting to websocket, I'll try to reconnect`)
        await new Promise(r=>setTimeout(r,1000))
        continue
    }

    // 
    // wait for connection with message
    // 
    while (true) {
        if (websocketConnection.state == "pending") {
            console.log("Waiting for websocket connection")
            await new Promise(r=>setTimeout(r,1000))
        } else if (websocketConnection.state == "rejected") {
            try {
                await websocketConnection
            } catch (error) {
                
            }
            console.error(`Error connecting to websocket, I'll try to reconnect`)
            await new Promise(r=>setTimeout(r,1000))
            continue
        } else {
            console.log("Connected!\n")
            break
        }
    }

    // 
    // key keypresses
    // 
    for await (const keypress of readKeypress()) {
        if (keypress.ctrlKey && keypress.key === 'c') {
            Deno.exit(0)
        } else {
            try {
                await socket.send(JSON.stringify(keypress))
            } catch (error) {
                console.error(`Error sending keypress to websocket, I'll try to reconnect:\n`, error)
                break
            }
        }
    }
}